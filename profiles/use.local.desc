# This file is deprecated as per GLEP 56 in favor of metadata.xml.
# Please add your descriptions to your package's metadata.xml ONLY.
# * generated automatically using pmaint *

dev-build/bazel:examples - Install examples (you compile them rn in any case)
dev-build/bazel:tools - Install additional tools (you compile them rn in any case)
dev-cmake/addboost-cmake:doc - Install related README.md
dev-cmake/cpm-cmake:doc - Install related README.md
dev-cmake/format-cmake:doc - Install related README.md
dev-cmake/packageproject-cmake:doc - Install related README.md
dev-cpp/boost-certify:examples - Build examples
dev-cpp/boost-ut:benchmarks - Build benchmarks
dev-cpp/boost-ut:doc - Install README.md.bz2
dev-cpp/boost-ut:examples - Build examples
dev-cpp/boost-ut:experimental-c++-modules - EXPERIMANTAL Try to enable C++ modules target.
dev-cpp/boost-ut:test-valgrind - Run tests with valgrind
dev-cpp/corral:doc - Install related README.md and doc/ folder
dev-cpp/corral:examples - Build examples (not install)
dev-cpp/glaze:doc - Install README files
dev-cpp/glaze:eetf-format - Link Erlang for erlang ettf format (and enable corresponsing tests)
dev-cpp/glaze:examples - Build examples (not install)
dev-cpp/glaze:fuzzing - Build fuzzers (not install)
dev-cpp/kleidiai:benchmark - Build benchmarks (not install)
dev-cpp/kleidiai:clang-tidy - Check the project with clang-tidy. Don't enable unless you are a developer.
dev-cpp/kokkos:cuda - Enable the CUDA execution space. Any Kokkos application compiled for CUDA embeds CUDA code via template metaprogramming. Thus, the whole application must be built with a CUDA-capable compiler. (At the moment, the only such compilers are NVIDIAâ€™s NVCC and Clang 10.0+)
dev-cpp/kokkos:hip - Enable the HIP execution space. Requires a compiler capable of understanding HIP.
dev-cpp/kokkos:openmp - Enable the OpenMP execution space. Requires the compiler to support OpenMP (e.g., -fopenmp).
dev-cpp/kokkos:serial - Enable the Serial execution space.(Single thread without parallelization support)
dev-cpp/kokkos:sycl - Enable the SYCL execution space. Requires a compiler capable of understanding SYCL.
dev-cpp/kokkos:threads - Enable the C++ Threads execution space. (aka multithread support)
dev-cpp/llama-cpp:accelerate - ggml: enable Accelerate framework
dev-cpp/llama-cpp:android - Enable if you build for android
dev-cpp/llama-cpp:blas - ggml: use BLAS; for using specific vendor check https://wiki.gentoo.org/wiki/Blas-lapack-switch
dev-cpp/llama-cpp:blis - ggml: use BLIS ( https://github.com/flame/blis )
dev-cpp/llama-cpp:cann - ggml: use CANN
dev-cpp/llama-cpp:cpu - ggml: enable CPU backend
dev-cpp/llama-cpp:cpu-native - ggml: enable CPU backend; it will add `-march=native` by itself. CPU_FLAGS_* consistency is expected to be user's problem
dev-cpp/llama-cpp:cuda - ggml: use CUDA ; use CMAKE_EXTRA_CACHE_FILE env variable (check https://gitweb.gentoo.org/repo/gentoo.git/tree/eclass/cmake.eclass ) to specify next variables: CMAKE_CUDA_ARCHITECTURES ( use next command to find native architecture: `nvidia-smi --query-gpu=compute_cap --format=csv | tail -n 1 | sed -e 's/\.//g'` ) ; GGML_CUDA_PEER_MAX_BATCH_SIZE ggml: max. batch size for using peer access, default: 128
dev-cpp/llama-cpp:cuda-f16 - ggml: use 16 bit floats for some calculations
dev-cpp/llama-cpp:cuda-fa-all-quants - ggml: compile all quants for FlashAttention
dev-cpp/llama-cpp:cuda-force-cublas - ggml: always use cuBLAS instead of mmq kernels
dev-cpp/llama-cpp:cuda-force-mmq - ggml: use mmq kernels instead of cuBLAS
dev-cpp/llama-cpp:cuda-graphs - ggml: use CUDA graphs (llama.cpp only)
dev-cpp/llama-cpp:cuda-no-peer-copy - ggml: do not use peer to peer copies
dev-cpp/llama-cpp:cuda-no-vmm - ggml: do not try to use CUDA VMM
dev-cpp/llama-cpp:cuda-unified-memory - ggml: CUDA : unified memory: allow CUDA app use unified memory architecture (UMA) to share main memory between the CPU and integrated GPU
dev-cpp/llama-cpp:examples - ggml: build examples; "llama: build examples"
dev-cpp/llama-cpp:hbm - ggml: use memkind for CPU HBM ( High Bandwidth Memory , check wikipedia.) ; a hardware-related feature
dev-cpp/llama-cpp:hip - ggml: use HIP
dev-cpp/llama-cpp:hip-graphs - ggml: use HIP graph, experimental, slow
dev-cpp/llama-cpp:hip-no-vmm - ggml: do not try to use HIP VMM
dev-cpp/llama-cpp:hip-uma - ggml: use HIP unified memory architecture : from docs/build.md : On Linux it is also possible to use unified memory architecture (UMA) to share main memory between the CPU and integrated GPU by setting -DGGML_HIP_UMA=ON. However, this hurts performance for non-integrated GPUs (but enables working with integrated GPUs).
dev-cpp/llama-cpp:kleidiai - ggml: use kleidiai optimized kernels if applicable" GUYS ON ARM64 or ARM, enable this!!!!!!!!!
dev-cpp/llama-cpp:kompute - ggml: use Kompute
dev-cpp/llama-cpp:llamafile - ggml: use LLAMAFILE
dev-cpp/llama-cpp:metal - ggml: use Metal; use CMAKE_EXTRA_CACHE_FILE env variable (check https://gitweb.gentoo.org/repo/gentoo.git/tree/eclass/cmake.eclass ) to specify next variables: ggml: metal minimum macOS version GGML_METAL_MACOSX_VERSION_MIN ; ggml: metal standard version (-std flag) GGML_METAL_STD
dev-cpp/llama-cpp:metal-embed-library - ggml: embed Metal library
dev-cpp/llama-cpp:metal-ndebug - ggml: disable Metal debugging
dev-cpp/llama-cpp:metal-shader-debug - ggml: compile Metal with -fno-fast-math
dev-cpp/llama-cpp:metal-use-bf16 - ggml: use bfloat if available
dev-cpp/llama-cpp:msvc - Enable if you build with MSVC
dev-cpp/llama-cpp:musa - ggml: use MUSA
dev-cpp/llama-cpp:opencl - ggml: use OpenCL
dev-cpp/llama-cpp:opencl-embed-kernels - ggml: embed kernels
dev-cpp/llama-cpp:opencl-profiling - ggml: use OpenCL profiling (increases overhead)
dev-cpp/llama-cpp:opencl-use-adreno-kernels - ggml: use optimized kernels for Adreno
dev-cpp/llama-cpp:openmp - ggml: use OpenMP
dev-cpp/llama-cpp:rpc - ggml: use RPC
dev-cpp/llama-cpp:server - ggml: build examples ; "llama: build server example"
dev-cpp/llama-cpp:static - static build?
dev-cpp/llama-cpp:test - ggml: build tests; "llama: build tests"
dev-cpp/llama-cpp:vulkan - ggml: use Vulkan ; use CMAKE_EXTRA_CACHE_FILE env variable (check https://gitweb.gentoo.org/repo/gentoo.git/tree/eclass/cmake.eclass ) to specify next variables: GGML_VULKAN_SHADERS_GEN_TOOLCHAIN "" "ggml: toolchain file for vulkan-shaders-gen"
dev-cpp/llama-cpp:vulkan-check-results - ggml: run Vulkan op checks
dev-cpp/llama-cpp:vulkan-debug - ggml: enable Vulkan debug output
dev-cpp/llama-cpp:vulkan-memory-debug - ggml: enable Vulkan memory debug output
dev-cpp/llama-cpp:vulkan-perf - ggml: enable Vulkan perf output
dev-cpp/llama-cpp:vulkan-run-tests - ggml: run Vulkan tests
dev-cpp/llama-cpp:vulkan-shader-debug-info - ggml: enable Vulkan shader debug info
dev-cpp/llama-cpp:vulkan-validate - ggml: enable Vulkan validation
dev-cpp/quill:benchmarks - Build benchmarks
dev-cpp/quill:doc - Install README files
dev-cpp/quill:examples - Build examples
dev-cpp/quill:extensive-test - Build extensive_tests
dev-cpp/quill:valgrind - Test with valgrind
dev-cpp/ut2-glaze:doc - Install README files.
dev-libs/boost:boost-context-fcontext - Boost.Context implementation. Default on not-windows OS. https://www.boost.org/doc/libs/1_87_0/libs/context/doc/html/context/cc/implementations__fcontext_t__ucontext_t_and_winfiber.html
dev-libs/boost:boost-context-ucontext - Boost.Context implementation. Deprecated. https://www.boost.org/doc/libs/1_87_0/libs/context/doc/html/context/cc/implementations__fcontext_t__ucontext_t_and_winfiber.html
dev-libs/boost:boost-context-winfib - Boost.Context implementation. Windows only. https://www.boost.org/doc/libs/1_87_0/libs/context/doc/html/context/cc/implementations__fcontext_t__ucontext_t_and_winfiber.html
dev-libs/boost:boost-iostream-bzip2 - When ON, enables BZip2 support. Defaults to ON when libbzip2 is found, OFF otherwise.
dev-libs/boost:boost-iostream-lzma - When ON, enables LZMA support. Defaults to ON when liblzma is found, OFF otherwise.
dev-libs/boost:boost-iostream-zlib - When ON, enables ZLib support. Defaults to ON when zlib is found, OFF otherwise.
dev-libs/boost:boost-iostream-zstd - When ON, enables Zstd support. Defaults to ON when libzstd is found, OFF otherwise.
dev-libs/boost:boost-locale-iconv - When ON, enables the Iconv backend. Defaults to ON when iconv is found, OFF otherwise. https://github.com/boostorg/cmake/tree/7f5336b3bf8067bb40da4e8b9940c133271e938a?tab=readme-ov-file
dev-libs/boost:boost-locale-icu - When ON, enables the ICU backend. Defaults to ON when ICU is found, OFF otherwise. https://github.com/boostorg/cmake/tree/7f5336b3bf8067bb40da4e8b9940c133271e938a?tab=readme-ov-file
dev-libs/boost:boost-locale-posix - When ON, enables the POSIX backend. Defaults to ON on POSIX systems, OFF otherwise. https://github.com/boostorg/cmake/tree/7f5336b3bf8067bb40da4e8b9940c133271e938a?tab=readme-ov-file
dev-libs/boost:boost-locale-std - When ON, enables the std::locale backend. Defaults to ON. https://github.com/boostorg/cmake/tree/7f5336b3bf8067bb40da4e8b9940c133271e938a?tab=readme-ov-file
dev-libs/boost:boost-locale-winapi - When ON, enables the Windows API backend. Defaults to ON under Windows, OFF otherwise. https://github.com/boostorg/cmake/tree/7f5336b3bf8067bb40da4e8b9940c133271e938a?tab=readme-ov-file
dev-libs/boost:boost-stacktrace-addr2line - Boost.Stacktrace: build boost_stacktrace_addr2line
dev-libs/boost:boost-stacktrace-backtrace - Boost.Stacktrace: build boost_stacktrace_backtrace
dev-libs/boost:boost-stacktrace-basic - Boost.Stacktrace: build boost_stacktrace_basic
dev-libs/boost:boost-stacktrace-from-exception - Boost.Stacktrace: build boost_stacktrace_from_exception
dev-libs/boost:boost-stacktrace-noop - Boost.Stacktrace: build boost_stacktrace_noop
dev-libs/boost:boost-stacktrace-windbg - Boost.Stacktrace: build boost_stacktrace_windbg
dev-libs/boost:boost-stacktrace-windbg-cached - Boost.Stacktrace: build boost_stacktrace_windbg_cached
dev-libs/boost:boost-thread-pthread - Threading API, pthread or win32. Defaults to win32 under Windows, pthread otherwise.
dev-libs/boost:boost-thread-win32 - Threading API, pthread or win32. Defaults to win32 under Windows, pthread otherwise.
dev-libs/boost:bzip2 - yet another USE flag for compability with gentoo's ebuild. Requires boost-iostream-bzip2
dev-libs/boost:context - yet another USE flag for compability with gentoo's ebuild. Requires any boost-context-* flag.
dev-libs/boost:lzma - yet another USE flag for compability with gentoo's ebuild. Requires boost-iostream-lzma
dev-libs/boost:mpi - Set to ON if Boost libraries depending on MPI should be built. https://github.com/boostorg/cmake/tree/7f5336b3bf8067bb40da4e8b9940c133271e938a?tab=readme-ov-file
dev-libs/boost:numpy - lol, yet another USE flag for compability with gentoo's ebuild. Always enabled. If you try disable it, get destroyed.
dev-libs/boost:python - Set to ON if Boost libraries depending on Python should be built. https://github.com/boostorg/cmake/tree/7f5336b3bf8067bb40da4e8b9940c133271e938a?tab=readme-ov-file
dev-libs/boost:stacktrace - yet another USE flag for compability with gentoo's ebuild. WARNING: you can enable multiple boost-stacktrace-* USE flags, but the logic of what will be the Boost::stacktrace cmake's target is a default priority on top of if the stacktrace backend is possible: windbg -> backtrace -> addr2line -> basic -> noop. At least that how it is now (march 2025)
dev-libs/boost:static - Set to ON if Boost libraries should be build as static libraries. https://github.com/boostorg/cmake/tree/7f5336b3bf8067bb40da4e8b9940c133271e938a?tab=readme-ov-file
dev-libs/boost:zlib - yet another USE flag for compability with gentoo's ebuild. Requires boost-iostream-zlib
dev-libs/boost:zstd - yet another USE flag for compability with gentoo's ebuild. Requires boost-iostream-zstd
dev-libs/simdjson:all-impls - Enable all (possibly supported by CHOST) implementations rather than only of them.
dev-libs/simdjson:shared-libs - Make shared library. If you are on windows, enable only one of `static-libs` and `shared-libs`
dev-libs/simdjson:singleheader - Make simdjson library out of amalgamated one simdjson.hpp and one simdjson.cpp, instead of whole bunch of files in include/ and src/ . Expected to be more stable.
dev-libs/simdjson:static-libs - Make static library. If you are on windows, enable only one of `static-libs` and `shared-libs`
dev-libs/simdjson:tools - Build and install extra command line tools
