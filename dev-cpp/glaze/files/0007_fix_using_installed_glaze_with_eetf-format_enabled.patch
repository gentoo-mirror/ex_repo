diff --git a/.gitignore b/.gitignore
index 0fa1c03..cb8db22 100644
--- a/.gitignore
+++ b/.gitignore
@@ -48,3 +48,5 @@ Thumbs.db
 
 # Allow mock test data
 !tests/mock_json_test/json/*.json
+
+cmake/install-config.cmake
diff --git a/cmake/install-config.cmake b/cmake/install-config.cmake
deleted file mode 100644
index b6ddfdb..0000000
--- a/cmake/install-config.cmake
+++ /dev/null
@@ -1 +0,0 @@
-include("${CMAKE_CURRENT_LIST_DIR}/glazeTargets.cmake")
\ No newline at end of file
diff --git a/cmake/install-config.cmake.in b/cmake/install-config.cmake.in
new file mode 100644
index 0000000..e24a71f
--- /dev/null
+++ b/cmake/install-config.cmake.in
@@ -0,0 +1,172 @@
+if(@glaze_EETF_FORMAT@)
+   # Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+   # file Copyright.txt or https://cmake.org/licensing for details.
+
+  #[=======================================================================[.rst:
+   FindErlang
+   -------
+
+   Finds Erlang libraries.
+
+   Imported Targets
+   ^^^^^^^^^^^^^^^^
+
+   This module provides the following imported targets, if found:
+
+   ``Erlang::Erlang``
+     Header only interface library suitible for compiling NIFs.
+
+   ``Erlang::EI``
+     Erlang interface library.
+
+   ``Erlang::ERTS``
+     Erlang runtime system library.
+
+   Result Variables
+   ^^^^^^^^^^^^^^^^
+
+   This will define the following variables:
+
+   ``Erlang_FOUND``
+     True if the system has the Erlang library.
+   ``Erlang_RUNTIME``
+     The path to the Erlang runtime.
+   ``Erlang_COMPILE``
+     The path to the Erlang compiler.
+   ``Erlang_EI_PATH``
+     The path to the Erlang erl_interface path.
+   ``Erlang_ERTS_PATH``
+     The path to the Erlang erts path.
+   ``Erlang_EI_INCLUDE_DIRS``
+     /include appended to Erlang_EI_PATH.
+   ``Erlang_EI_LIBRARY_PATH``
+     /lib appended to Erlang_EI_PATH.
+   ``Erlang_ERTS_INCLUDE_DIRS``
+     /include appended to Erlang_ERTS_PATH.
+   ``Erlang_ERTS_LIBRARY_PATH``
+     /lib appended to Erlang_ERTS_PATH.
+   ``Erlang_OTP_VERSION``
+     Current Erlang OTP version
+
+#]=======================================================================]
+   include(FindPackageHandleStandardArgs)
+
+   set(Erlang_BIN_PATH $ENV{ERLANG_HOME}/bin /opt/bin /sw/bin /usr/bin
+                      /usr/local/bin /opt/local/bin)
+
+   find_program(
+    Erlang_RUNTIME
+    NAMES erl
+    PATHS ${Erlang_BIN_PATH})
+
+   find_program(
+    Erlang_COMPILE
+    NAMES erlc
+    PATHS ${Erlang_BIN_PATH})
+
+   execute_process(
+    COMMAND erl -noshell -eval "io:format(\"~s\", [code:lib_dir()])" -s erlang
+            halt OUTPUT_VARIABLE Erlang_OTP_LIB_DIR)
+
+   execute_process(
+    COMMAND erl -noshell -eval "io:format(\"~s\", [code:root_dir()])" -s erlang
+            halt OUTPUT_VARIABLE Erlang_OTP_ROOT_DIR)
+
+   execute_process(
+    COMMAND
+      erl -noshell -eval
+      "io:format(\"~s\",[filename:basename(code:lib_dir('erl_interface'))])" -s
+      erlang halt
+    OUTPUT_VARIABLE Erlang_EI_DIR)
+
+   execute_process(
+    COMMAND
+      erl -noshell -eval
+      "io:format(\"~s\",[filename:basename(code:lib_dir('erts'))])" -s erlang
+      halt
+    OUTPUT_VARIABLE Erlang_ERTS_DIR)
+
+   execute_process(
+    COMMAND
+      erl -noshell -eval "io:format(\"~s\", [erlang:system_info(otp_release)])"
+      -s erlang halt
+    OUTPUT_VARIABLE Erlang_OTP_VERSION)
+
+   set(Erlang_EI_PATH ${Erlang_OTP_LIB_DIR}/${Erlang_EI_DIR})
+   set(Erlang_EI_INCLUDE_DIRS ${Erlang_OTP_LIB_DIR}/${Erlang_EI_DIR}/include)
+   set(Erlang_EI_LIBRARY_PATH ${Erlang_OTP_LIB_DIR}/${Erlang_EI_DIR}/lib)
+
+   set(Erlang_ERTS_PATH ${Erlang_OTP_ROOT_DIR}/${Erlang_ERTS_DIR})
+   set(Erlang_ERTS_INCLUDE_DIRS
+      ${Erlang_OTP_ROOT_DIR}/${Erlang_ERTS_DIR}/include)
+   set(Erlang_ERTS_LIBRARY_PATH ${Erlang_OTP_ROOT_DIR}/${Erlang_ERTS_DIR}/lib)
+
+   find_package_handle_standard_args(
+    Erlang
+    DEFAULT_MSG
+    Erlang_RUNTIME
+    Erlang_COMPILE
+    Erlang_OTP_LIB_DIR
+    Erlang_OTP_ROOT_DIR
+    Erlang_EI_DIR
+    Erlang_ERTS_DIR
+    Erlang_OTP_VERSION)
+
+   if(Erlang_FOUND)
+      if(NOT TARGET Erlang::Erlang)
+         add_library(Erlang::Erlang INTERFACE IMPORTED)
+         set_target_properties(
+        Erlang::Erlang PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
+                                  ${Erlang_OTP_ROOT_DIR}/usr/include)
+      endif()
+
+      if(NOT TARGET Erlang::ERTS)
+         add_library(Erlang::ERTS STATIC IMPORTED)
+         set_target_properties(
+        Erlang::ERTS
+        PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${Erlang_ERTS_INCLUDE_DIRS}
+                   IMPORTED_LOCATION ${Erlang_ERTS_LIBRARY_PATH}/liberts.a)
+      endif()
+
+      if(NOT TARGET Erlang::EI)
+         add_library(erlang_ei STATIC IMPORTED)
+         set_property(TARGET erlang_ei PROPERTY IMPORTED_LOCATION
+                                             ${Erlang_EI_LIBRARY_PATH}/libei.a)
+         add_library(Erlang::EI INTERFACE IMPORTED)
+         set_property(TARGET Erlang::EI PROPERTY INTERFACE_INCLUDE_DIRECTORIES
+                                              ${Erlang_EI_INCLUDE_DIRS})
+         set_property(TARGET Erlang::EI PROPERTY INTERFACE_LINK_LIBRARIES
+                                              erlang_ei)
+      endif()
+   endif(Erlang_FOUND)
+
+  #[[
+   https://gist.github.com/JayKickliter/dd0016bd5545de466e7ca158d4b19417
+   How I compile Erlang from source on macOS
+
+   CFLAGS="-Og -ggdb3 -fno-omit-frame-pointer" \
+   CXXFLAGS="-Og -ggdb3 -fno-omit-frame-pointer" \
+   ./configure \
+         --prefix=$HOME/.local \
+         --disable-silent-rules \
+         --enable-dynamic-ssl-lib \
+         --with-ssl=/usr/local/opt/openssl \
+         --disable-hipe \
+         --enable-sctp \
+         --enable-shared-zlib \
+         --enable-smp-support \
+         --enable-threads \
+         --enable-wx \
+         --without-javac \
+         --enable-darwin-64bit
+   ]]
+
+   if(NOT ${Erlang_FOUND})
+      message(
+      FATAL_ERROR
+      "Erlang is not found, while glaze was configured with glaze_EETF_FORMAT enabled. It seems you uninstalled Erlang, but then didn't reconfigured glaze with glaze_EETF_FORMAT=0 ."
+    )
+   endif()
+
+endif()
+include("${CMAKE_CURRENT_LIST_DIR}/glazeTargets.cmake")
diff --git a/cmake/install-rules.cmake b/cmake/install-rules.cmake
index 1db5b74..871e22f 100644
--- a/cmake/install-rules.cmake
+++ b/cmake/install-rules.cmake
@@ -1,3 +1,5 @@
+message("FOR THE FUCK SAKE I WAS HERE")
+
 # Project is configured with no languages, so tell GNUInstallDirs the lib dir
 set(CMAKE_INSTALL_LIBDIR lib CACHE PATH "")
 
@@ -32,6 +34,8 @@ set(
 )
 mark_as_advanced(glaze_INSTALL_CMAKEDIR)
 
+configure_file(${CMAKE_CURRENT_LIST_DIR}/install-config.cmake.in ${CMAKE_CURRENT_LIST_DIR}/install-config.cmake @ONLY)
+
 install(
     FILES cmake/install-config.cmake
     DESTINATION "${glaze_INSTALL_CMAKEDIR}"
